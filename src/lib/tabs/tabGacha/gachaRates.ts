/*
The % probability of a given run ending on a certain pull
let store = 1
let arr = []
for (let i = 0; i <= 90; i++) {
  store *= i == 0 ? 1 : 1 - chanceCharacter(i - 1)
  const val = store * chanceCharacter(i) * 100
  console.log(i, val.toFixed(20))
  arr[i] = val
}
console.log(arr)

function chanceCharacter(n: number) {
  const softStacks = Math.max(0, n - 72)
  return 0.00600 + softStacks * 0.06
}
 */

export const characterDistribution = [
  /* 00 */ 0.6,
  /* 01 */ 0.5963999999999999,
  /* 02 */ 0.5928216,
  /* 03 */ 0.5892646704000001,
  /* 04 */ 0.5857290823776,
  /* 05 */ 0.5822147078833344,
  /* 06 */ 0.5787214196360344,
  /* 07 */ 0.5752490911182182,
  /* 08 */ 0.5717975965715089,
  /* 09 */ 0.5683668109920799,
  /* 10 */ 0.5649566101261274,
  /* 11 */ 0.5615668704653705,
  /* 12 */ 0.5581974692425783,
  /* 13 */ 0.5548482844271228,
  /* 14 */ 0.5515191947205601,
  /* 15 */ 0.5482100795522367,
  /* 16 */ 0.5449208190749233,
  /* 17 */ 0.5416512941604738,
  /* 18 */ 0.5384013863955109,
  /* 19 */ 0.5351709780771379,
  /* 20 */ 0.531959952208675,
  /* 21 */ 0.5287681924954231,
  /* 22 */ 0.5255955833404504,
  /* 23 */ 0.5224420098404077,
  /* 24 */ 0.5193073577813653,
  /* 25 */ 0.5161915136346771,
  /* 26 */ 0.513094364552869,
  /* 27 */ 0.5100157983655518,
  /* 28 */ 0.5069557035753586,
  /* 29 */ 0.5039139693539063,
  /* 30 */ 0.5008904855377829,
  /* 31 */ 0.4978851426245562,
  /* 32 */ 0.4948978317688089,
  /* 33 */ 0.4919284447781959,
  /* 34 */ 0.4889768741095268,
  /* 35 */ 0.4860430128648697,
  /* 36 */ 0.4831267547876804,
  /* 37 */ 0.48022799425895435,
  /* 38 */ 0.4773466262934007,
  /* 39 */ 0.4744825465356403,
  /* 40 */ 0.4716356512564264,
  /* 41 */ 0.46880583734888787,
  /* 42 */ 0.46599300232479457,
  /* 43 */ 0.4631970443108458,
  /* 44 */ 0.46041786204498075,
  /* 45 */ 0.45765535487271086,
  /* 46 */ 0.45490942274347457,
  /* 47 */ 0.4521799662070137,
  /* 48 */ 0.4494668864097716,
  /* 49 */ 0.446770085091313,
  /* 50 */ 0.44408946458076515,
  /* 51 */ 0.4414249277932806,
  /* 52 */ 0.4387763782265209,
  /* 53 */ 0.4361437199571617,
  /* 54 */ 0.43352685763741877,
  /* 55 */ 0.43092569649159423,
  /* 56 */ 0.4283401423126446,
  /* 57 */ 0.4257701014587688,
  /* 58 */ 0.4232154808500162,
  /* 59 */ 0.4206761879649161,
  /* 60 */ 0.41815213083712655,
  /* 61 */ 0.4156432180521039,
  /* 62 */ 0.41314935874379116,
  /* 63 */ 0.4106704625913285,
  /* 64 */ 0.4082064398157804,
  /* 65 */ 0.40575720117688574,
  /* 66 */ 0.4033226579698244,
  /* 67 */ 0.4009027220220055,
  /* 68 */ 0.3984973056898735,
  /* 69 */ 0.39610632185573424,
  /* 70 */ 0.3937296839245998,
  /* 71 */ 0.39136730582105217,
  /* 72 */ 0.3890191019861259,
  /* 73 */ 4.253534861116301,
  /* 74 */ 7.584439342357737,
  /* 75 */ 9.78537140675431,
  /* 76 */ 10.5347414622264,
  /* 77 */ 9.880559711913513,
  /* 78 */ 8.201639506747972,
  /* 79 */ 6.052272143553331,
  /* 80 */ 3.9633005780615296,
  /* 81 */ 2.288634830101852,
  /* 82 */ 1.1532204560383552,
  /* 83 */ 0.49935587548892496,
  /* 84 */ 0.18181052569377856,
  /* 85 */ 0.053933115778946196,
  /* 86 */ 0.012422731568808564,
  /* 87 */ 0.002048781559582088,
  /* 88 */ 0.00020533947101135993,
  /* 89 */ 0.00000741517816434812,
]

/*
The % probability of a given run ending on a certain pull

let store = 1
let arr = []
for (let i = 0; i <= 80; i++) {
  store *= i == 0 ? 1 : 1 - chanceLightCone(i - 1)
  const val = store * chanceLightCone(i) * 100
  console.log(i, val.toFixed(20))
  arr[i] = val
}
console.log(arr)

function chanceLightCone(n: number) {
  const softStacks = Math.max(0, n - 64)
  return 0.00800 + softStacks * 0.07
}
 */

export const lightConeDistribution = [
  /* 00 */ 0.8,
  /* 01 */ 0.7936000000000001,
  /* 02 */ 0.7872512,
  /* 03 */ 0.7809531904,
  /* 04 */ 0.7747055648768,
  /* 05 */ 0.7685079203577855,
  /* 06 */ 0.7623598569949233,
  /* 07 */ 0.7562609781389639,
  /* 08 */ 0.7502108903138521,
  /* 09 */ 0.7442092031913413,
  /* 10 */ 0.7382555295658106,
  /* 11 */ 0.7323494853292841,
  /* 12 */ 0.7264906894466499,
  /* 13 */ 0.7206787639310767,
  /* 14 */ 0.7149133338196281,
  /* 15 */ 0.7091940271490709,
  /* 16 */ 0.7035204749318783,
  /* 17 */ 0.6978923111324233,
  /* 18 */ 0.692309172643364,
  /* 19 */ 0.686770699262217,
  /* 20 */ 0.6812765336681192,
  /* 21 */ 0.6758263213987744,
  /* 22 */ 0.6704197108275842,
  /* 23 */ 0.6650563531409635,
  /* 24 */ 0.6597359023158357,
  /* 25 */ 0.654458015097309,
  /* 26 */ 0.6492223509765305,
  /* 27 */ 0.6440285721687182,
  /* 28 */ 0.6388763435913685,
  /* 29 */ 0.6337653328426376,
  /* 30 */ 0.6286952101798965,
  /* 31 */ 0.6236656484984573,
  /* 32 */ 0.6186763233104696,
  /* 33 */ 0.6137269127239857,
  /* 34 */ 0.6088170974221939,
  /* 35 */ 0.6039465606428163,
  /* 36 */ 0.5991149881576737,
  /* 37 */ 0.5943220682524123,
  /* 38 */ 0.5895674917063929,
  /* 39 */ 0.5848509517727418,
  /* 40 */ 0.5801721441585599,
  /* 41 */ 0.5755307670052914,
  /* 42 */ 0.570926520869249,
  /* 43 */ 0.566359108702295,
  /* 44 */ 0.5618282358326766,
  /* 45 */ 0.5573336099460152,
  /* 46 */ 0.5528749410664471,
  /* 47 */ 0.5484519415379154,
  /* 48 */ 0.544064326005612,
  /* 49 */ 0.5397118113975672,
  /* 50 */ 0.5353941169063867,
  /* 51 */ 0.5311109639711357,
  /* 52 */ 0.5268620762593665,
  /* 53 */ 0.5226471796492915,
  /* 54 */ 0.5184660022120972,
  /* 55 */ 0.5143182741944005,
  /* 56 */ 0.5102037280008452,
  /* 57 */ 0.5061220981768384,
  /* 58 */ 0.5020731213914238,
  /* 59 */ 0.4980565364202923,
  /* 60 */ 0.49407208412893006,
  /* 61 */ 0.4901195074558986,
  /* 62 */ 0.4861985513962514,
  /* 63 */ 0.4823089629850814,
  /* 64 */ 0.47845049128120076,
  /* 65 */ 4.627573151671775,
  /* 66 */ 8.095642589545173,
  /* 67 */ 10.159812648728124,
  /* 68 */ 10.49611176833006,
  /* 69 */ 9.289642032292566,
  /* 70 */ 7.130085695712911,
  /* 71 */ 4.745438530228964,
  /* 72 */ 2.7170589573400923,
  /* 73 */ 1.3184241577222655,
  /* 74 */ 0.5296345422062471,
  /* 75 */ 0.16994386548057394,
  /* 76 */ 0.041122046709397085,
  /* 77 */ 0.006766516402880222,
  /* 78 */ 0.0005971634998864304,
  /* 79 */ 0.000007673671856840138,
]

/*
const cumulative = []
for (let i = 0; i < 90; i++) {
  cumulative[i] = i == 0 ? characterDistribution[i] : cumulative[i - 1] + characterDistribution[i]
}
console.log(cumulative)
 */
export const characterCumulative = [
  /* 00 */ 0.6,
  /* 01 */ 1.1964,
  /* 02 */ 1.7892215999999999,
  /* 03 */ 2.3784862704,
  /* 04 */ 2.9642153527776,
  /* 05 */ 3.546430060660934,
  /* 06 */ 4.125151480296968,
  /* 07 */ 4.700400571415186,
  /* 08 */ 5.272198167986695,
  /* 09 */ 5.840564978978775,
  /* 10 */ 6.405521589104902,
  /* 11 */ 6.967088459570272,
  /* 12 */ 7.52528592881285,
  /* 13 */ 8.080134213239972,
  /* 14 */ 8.631653407960533,
  /* 15 */ 9.179863487512769,
  /* 16 */ 9.724784306587692,
  /* 17 */ 10.266435600748165,
  /* 18 */ 10.804836987143677,
  /* 19 */ 11.340007965220815,
  /* 20 */ 11.87196791742949,
  /* 21 */ 12.400736109924914,
  /* 22 */ 12.926331693265364,
  /* 23 */ 13.448773703105772,
  /* 24 */ 13.968081060887137,
  /* 25 */ 14.484272574521814,
  /* 26 */ 14.997366939074682,
  /* 27 */ 15.507382737440235,
  /* 28 */ 16.014338441015592,
  /* 29 */ 16.5182524103695,
  /* 30 */ 17.019142895907283,
  /* 31 */ 17.51702803853184,
  /* 32 */ 18.01192587030065,
  /* 33 */ 18.503854315078847,
  /* 34 */ 18.992831189188372,
  /* 35 */ 19.47887420205324,
  /* 36 */ 19.96200095684092,
  /* 37 */ 20.442228951099874,
  /* 38 */ 20.919575577393275,
  /* 39 */ 21.394058123928914,
  /* 40 */ 21.865693775185342,
  /* 41 */ 22.33449961253423,
  /* 42 */ 22.800492614859024,
  /* 43 */ 23.26368965916987,
  /* 44 */ 23.72410752121485,
  /* 45 */ 24.18176287608756,
  /* 46 */ 24.636672298831034,
  /* 47 */ 25.088852265038046,
  /* 48 */ 25.53831915144782,
  /* 49 */ 25.98508923653913,
  /* 50 */ 26.4291787011199,
  /* 51 */ 26.87060362891318,
  /* 52 */ 27.3093800071397,
  /* 53 */ 27.745523727096863,
  /* 54 */ 28.17905058473428,
  /* 55 */ 28.609976281225876,
  /* 56 */ 29.03831642353852,
  /* 57 */ 29.464086524997292,
  /* 58 */ 29.887302005847307,
  /* 59 */ 30.30797819381222,
  /* 60 */ 30.726130324649347,
  /* 61 */ 31.14177354270145,
  /* 62 */ 31.55492290144524,
  /* 63 */ 31.96559336403657,
  /* 64 */ 32.37379980385235,
  /* 65 */ 32.77955700502923,
  /* 66 */ 33.182879662999056,
  /* 67 */ 33.58378238502106,
  /* 68 */ 33.98227969071093,
  /* 69 */ 34.378386012566665,
  /* 70 */ 34.77211569649126,
  /* 71 */ 35.16348300231231,
  /* 72 */ 35.55250210429844,
  /* 73 */ 39.80603696541474,
  /* 74 */ 47.39047630777248,
  /* 75 */ 57.17584771452679,
  /* 76 */ 67.71058917675319,
  /* 77 */ 77.59114888866671,
  /* 78 */ 85.79278839541468,
  /* 79 */ 91.845060538968,
  /* 80 */ 95.80836111702953,
  /* 81 */ 98.09699594713139,
  /* 82 */ 99.25021640316974,
  /* 83 */ 99.74957227865868,
  /* 84 */ 99.93138280435245,
  /* 85 */ 99.9853159201314,
  /* 86 */ 99.9977386517002,
  /* 87 */ 99.99978743325978,
  /* 88 */ 99.99999277273079,
  /* 89 */ 100.00000018790895,
]

/*
const cumulative = []
for (let i = 0; i < 80; i++) {
  cumulative[i] = i == 0 ? lightConeDistribution[i] : cumulative[i - 1] + lightConeDistribution[i]
}
console.log(cumulative)
 */
export const lightConeCumulative = [
  /* 00 */ 0.8,
  /* 01 */ 1.5936000000000001,
  /* 02 */ 2.3808512000000004,
  /* 03 */ 3.1618043904000004,
  /* 04 */ 3.9365099552768004,
  /* 05 */ 4.705017875634586,
  /* 06 */ 5.467377732629509,
  /* 07 */ 6.223638710768473,
  /* 08 */ 6.973849601082325,
  /* 09 */ 7.718058804273666,
  /* 10 */ 8.456314333839478,
  /* 11 */ 9.188663819168761,
  /* 12 */ 9.91515450861541,
  /* 13 */ 10.635833272546487,
  /* 14 */ 11.350746606366116,
  /* 15 */ 12.059940633515186,
  /* 16 */ 12.763461108447064,
  /* 17 */ 13.461353419579488,
  /* 18 */ 14.153662592222853,
  /* 19 */ 14.84043329148507,
  /* 20 */ 15.52170982515319,
  /* 21 */ 16.197536146551965,
  /* 22 */ 16.86795585737955,
  /* 23 */ 17.53301221052051,
  /* 24 */ 18.192748112836345,
  /* 25 */ 18.847206127933653,
  /* 26 */ 19.496428478910182,
  /* 27 */ 20.1404570510789,
  /* 28 */ 20.779333394670267,
  /* 29 */ 21.413098727512907,
  /* 30 */ 22.041793937692802,
  /* 31 */ 22.665459586191258,
  /* 32 */ 23.284135909501728,
  /* 33 */ 23.897862822225715,
  /* 34 */ 24.506679919647908,
  /* 35 */ 25.110626480290726,
  /* 36 */ 25.7097414684484,
  /* 37 */ 26.304063536700813,
  /* 38 */ 26.893631028407206,
  /* 39 */ 27.47848198017995,
  /* 40 */ 28.05865412433851,
  /* 41 */ 28.6341848913438,
  /* 42 */ 29.20511141221305,
  /* 43 */ 29.771470520915344,
  /* 44 */ 30.33329875674802,
  /* 45 */ 30.890632366694035,
  /* 46 */ 31.443507307760484,
  /* 47 */ 31.9919592492984,
  /* 48 */ 32.536023575304014,
  /* 49 */ 33.07573538670158,
  /* 50 */ 33.61112950360797,
  /* 51 */ 34.14224046757911,
  /* 52 */ 34.66910254383848,
  /* 53 */ 35.19174972348777,
  /* 54 */ 35.71021572569986,
  /* 55 */ 36.22453399989426,
  /* 56 */ 36.73473772789511,
  /* 57 */ 37.24085982607195,
  /* 58 */ 37.74293294746337,
  /* 59 */ 38.240989483883666,
  /* 60 */ 38.7350615680126,
  /* 61 */ 39.2251810754685,
  /* 62 */ 39.71137962686475,
  /* 63 */ 40.19368858984983,
  /* 64 */ 40.67213908113103,
  /* 65 */ 45.299712232802804,
  /* 66 */ 53.395354822347976,
  /* 67 */ 63.5551674710761,
  /* 68 */ 74.05127923940617,
  /* 69 */ 83.34092127169873,
  /* 70 */ 90.47100696741164,
  /* 71 */ 95.2164454976406,
  /* 72 */ 97.93350445498069,
  /* 73 */ 99.25192861270295,
  /* 74 */ 99.78156315490921,
  /* 75 */ 99.95150702038978,
  /* 76 */ 99.99262906709919,
  /* 77 */ 99.99939558350206,
  /* 78 */ 99.99999274700195,
  /* 79 */ 100.00000042067381,
]
